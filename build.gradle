buildscript {
	repositories {
		mavenCentral()
		jcenter()
	}
	dependencies {
		classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.0'
		classpath 'eu.appsatori:gradle-fatjar-plugin:0.3'
	}
}

apply plugin: 'java'
apply plugin: 'eu.appsatori.fatjar'
apply plugin: 'eclipse'

repositories {
	mavenCentral()
	jcenter()
}

dependencies{
	//slack api
	compile group: 'com.ullink.slack', name: 'simpleslackapi', version: '0.5.1'

	//general
	compile group: 'commons-io', name: 'commons-io', version: '2.5'
	compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.4'
	compile group: 'org.apache.commons', name: 'commons-collections4', version: '4.1'

	//github API
	compile group: 'org.kohsuke', name:'github-api', version:'1.77'

	//wordnet (OPTIONAL)
	compile group: 'de.sciss', name: 'ws4j', version: '0.1.0'
	//TO USE WORDNET (for the AI), please download wnjpn.db and add it to src/main/resources (http://nlpwww.nict.go.jp/wn-ja/data/1.1/wnjpn.db.gz)


	//database (OPTIONAL)
	compile group: 'org.postgresql', name: 'postgresql', version: '9.4.1209'
	compile group: 'org.hibernate', name: 'hibernate-core', version: '5.2.1.Final'

	//trueskill algorithm (OPTIONAL)
	compile files('libs/jskills-0.9.1-SNAPSHOT.jar')//BUILT FROM: https://github.com/nsp/JSkills
	compile group: 'org.ejml', name: 'simple', version:'0.28'

	//testing
	testCompile group: 'junit', name: 'junit', version: '4.12'
}


task rankingTest(type:JavaExec){
	main = 'com.raether.watchwordbot.ranking.RankingTest'
	classpath = sourceSets.main.runtimeClasspath
}

task semanticTest(type:JavaExec){
	main = 'com.raether.watchwordbot.meatsim.SemanticSimilarityTest'
	classpath = sourceSets.main.runtimeClasspath
}

task githubTest(type:JavaExec){
	main = 'com.raether.watchwordbot.gh.GithubTest'
	classpath = sourceSets.main.runtimeClasspath

	environment "GITHUB_LOGIN", System.getProperty("GITHUB_LOGIN");
	environment "GITHUB_PASSWORD", System.getProperty("GITHUB_PASSWORD");
	environment "GITHUB_OAUTH", System.getProperty("GITHUB_OAUTH");
	environment "GITHUB_ENDPOINT", System.getProperty("GITHUB_ENDPOINT");
	systemProperty "GITHUB_REPOSITORY", System.getProperty("GITHUB_REPOSITORY");
}

task runner(type:JavaExec) {
	main = 'com.raether.watchwordbot.Runner'
	systemProperty "POSTGRES_PORT_5432_TCP_ADDR", System.getProperty("POSTGRES_PORT_5432_TCP_ADDR")
	systemProperty "POSTGRES_PORT_5432_TCP_PORT", System.getProperty("POSTGRES_PORT_5432_TCP_PORT")
	systemProperty "POSTGRES_ENV_POSTGRES_USERNAME", System.getProperty("POSTGRES_ENV_POSTGRES_USERNAME")
	systemProperty "POSTGRES_ENV_POSTGRES_PASSWORD", System.getProperty("POSTGRES_ENV_POSTGRES_PASSWORD")
	systemProperty "DB_CREATION_STRATEGY", System.getProperty("DB_CREATION_STRATEGY") //create or update

	environment "GITHUB_LOGIN", System.getProperty("GITHUB_LOGIN");
	environment "GITHUB_PASSWORD", System.getProperty("GITHUB_PASSWORD");
	environment "GITHUB_OAUTH", System.getProperty("GITHUB_OAUTH");
	environment "GITHUB_ENDPOINT", System.getProperty("GITHUB_ENDPOINT");
	systemProperty "GITHUB_REPOSITORY", System.getProperty("GITHUB_REPOSITORY");

	classpath = sourceSets.main.runtimeClasspath
	args = {
		if(project.hasProperty("apiKey")){
			return [getProperty("apiKey")];
		}
		return [];
	}();
}

jar {
	// Keep jar clean:
	exclude 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA', 'META-INF/*.MF'

	manifest { attributes 'Main-Class': 'com.raether.watchwordbot.Runner' }
	from {
		configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
	}
}